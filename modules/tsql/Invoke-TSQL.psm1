FUNCTION Invoke-TSQL {

    Param(

        [parameter(mandatory = $true)]
        [string]
        $Server,

        [parameter(mandatory = $true)]
        [string]
        $Database,
        
        [parameter(ParameterSetName = "Password", mandatory = $true)]
        [string]
        $Username,

        [parameter(ParameterSetName = "Password", mandatory = $true)]
        [string]
        $Password,

        [parameter(ParameterSetName = "Integrated", mandatory = $true)]
        [switch]
        $Integrated_Security,

        [parameter(mandatory = $true, ValueFromPipeline = $true)]
        [string]
        $Query,

        [switch]
        $Trusted_Connection,     

        # Optionals
        [switch]
        $OutNull,

        [switch]
        $Verbosely,

        [scriptblock]
        $OnError,

        [scriptblock]
        $OnSuccess,

        [string]
        $OutputAs
    )
    Write-Host "`n`0Starting $($MyInvocation.MyCommand)`0" -f 'white' -b 'DarkBlue'
    
    FUNCTION Write-Note ($Value) {write-host $([string]$Value) -f 'gray'}

    [string]$Conn = "Server=$Server;Database=$Database;"
    if ($Verbosely) {
        Write-Note "Server`t`t`t:`0$Server"
        Write-Note "Database`t`t:`0$Database"
    }

    if ($Trusted_Connection) { 
        [string]$Conn += "Trusted_Connection=Yes;"
        if ($Verbosely) {Write-Note "Trusted_Connection`t:`0Yes"}
    }
    if ($Username) {
        [string]$Conn += "User Id=$Username;"
        if ($Verbosely) {Write-Note "Username`t`t:`0$Username"}
    }
    if ($Password) {
        [string]$Conn += "Password=$Password;"
        #if ($Verbosely) {Write-Note "Password`t`t:`0$Password"}
    }
    if ($Integrated_Security) {
        [string]$Conn += "Integrated Security=SSPI;"
        if ($Verbosely) {Write-Note "Integrated_Security`t:`0$Integrated_Security"}
    }

    $SQLCMD = @{}
    $SQLCMD.ConnectionString = $Conn
    $SQLCMD.Query = $Query 
    $SQLCMD.ErrorAction = 'Stop'
    if ($OutputAs) {$SQLCMD.OutputAs = $OutputAs}
    

    try {
        $Query_Start_Time = Get-Date
        
        $TSQL_RESULTS = Invoke-Sqlcmd @SQLCMD
        
        $Query_Time_Span = New-TimeSpan -Start $Query_Start_Time -End $(Get-Date) 
        if ($OnSuccess) { $OnSuccess.Invoke($SQLCMD, $TSQL_RESULTS) }
        if ($Verbosely) { Write-Host "Success`t`t`t:`0True" -f 'green'}
        [bool]$Success = $true
    }
    
    # BAD TSQL SCRIPT
    catch [Microsoft.SqlServer.Management.PowerShell.GetScriptCommand] {
        [int]$TSQL_ERROR_Line = $PSItem.Exception.InnerException.LineNumber
        [int]$TSQL_ERROR_LVL = $PSItem.Exception.InnerException.class
        if ($TSQL_ERROR_LVL -in 1..10 ) {
            Write-Host "`Error Type`t`t:`0problems caused by mistakes in information that a user has entered" -f red
        }
        if ($TSQL_ERROR_LVL -in 11..16 ) {
            Write-Host "`Error Type`t`t:`0problems was generated by the user, and can be corrected by the user" -f red
        }
        if ($TSQL_ERROR_LVL -in 17..19 ) {
            Write-Host "`Error Type`t`t:`0software or hardware errors" -f red
        }
    }
    # General Error Message
    catch {
        if ($Verbosely) {
            Write-Host "`Error`t`t`t:`0$PSItem" -f red
        }
        if ($OnError) { $OnError.Invoke($SQLCMD, $PSItem) }
        [bool]$Success = $False
    }
    finally {

        # query did not return anything 
        if ($Success -and !$TSQL_RESULTS ) {
            if ($Verbosely) { Write-Host "`Results`t`t`t:`0Null" -f 'yellow' }
        }
        # query did return Something 
        elseif ($TSQL_RESULTS -and $Success) {

            # Return Type Information
            if ($TSQL_RESULTS -is [System.Data.DataSet]) {
                $Data_Table_Count = $TSQL_RESULTS.Tables.Count
                if ($Verbosely) { Write-Host "`Result Type`t`t:`0System.Data.DataSet" -f 'Green' }
                if ($Verbosely) { Write-Host "`Table Count`t`t`t:`0$($Data_Table_Count)" -f 'Green' }
            }
            elseif ($TSQL_RESULTS -is [System.Data.DataTable]) {
                $Data_Row_Count = $TSQL_RESULTS.Rows.Count
                $Data_Column_Count = $TSQL_RESULTS.Columns.Count
                if ($Verbosely) { Write-Host "`Result Type`t`t:`0System.Data.DataTable" -f 'Green' }
                if ($Verbosely) { Write-Host "`Row Count`t`t:`0$($Data_Row_Count)" -f 'Green' }
                if ($Verbosely) { Write-Host "`Column Count`t`t:`0$($Data_Column_Count)" -f 'Green' }
            }
            elseif ($TSQL_RESULTS -is [array]) {
                if ($Verbosely) { Write-Host "`Result Type`t`t:`0Array" -f 'Green' }
                if ($Verbosely) { Write-Host "`Row Count`t`t:`0$($TSQL_RESULTS.Count)" -f 'Green' }
            }
            elseif ($TSQL_RESULTS -is [System.Data.DataRow]) {
                $Data_Column_Count = $TSQL_RESULTS.table.columns.Count
                if ($Verbosely) { Write-Host "`Result Type`t`t:`0System.Data.DataRow" -f 'Green' }
                if ($Verbosely) { Write-Host "`Column Count`t`t:`0$Data_Column_Count" -f 'Green' }
            }
        }
        # time
        if ($Verbosely -and $Success) { 
            Write-Host "Time Elapsed`t`t:`0$Query_Time_Span" -f Magenta
        }

    } 

    # Return Value to Pipe
    if ($TSQL_RESULTS -and $Success -and ($OutNull -eq $False) ) {
        RETURN $TSQL_RESULTS
    }
}


























